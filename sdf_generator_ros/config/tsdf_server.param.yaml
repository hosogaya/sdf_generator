tsdf_server:
  ros__parameters:
    world_frame: map
    sensor_frame: unilidar_lidar
    color_map_method: grayscale # [grayscale, rainbow] If the point cloud does not have color value, the color is calculated with its intensity.
                                # If the point cloud does not have intensity also, the color takes constant value.  
    sensor_type: lidar # [lidar]
    # map
    tsdf_voxel_size: 0.1
    tsdf_voxels_per_side: 8
    # integrator
    truncation_distance: 0.1
    voxel_carving_enabled: true
    max_ray_length_m: 5.0
    min_ray_length_m: 0.1
    max_weight: 100.0
    use_const_weight:  false
    use_weight_dropoff: true
    allow_clear: true # If it takes False, only voxels of neighbors of a point are updated
    start_voxel_subsampling_factor: 2.0 # only used for fast integrator (not implemented)
    max_consecutive_ray_collisions: 2 # only used for fast integrator (not implemented)
    clear_checks_every_n_frames: 1 # only used for fast integratior (not implemented)

    # max_integration_time_s: 
    anti_grazing: false # If it take True, the merge integrator update voxel just once. 
                        # If takes False, the voxel value updation is repeated for the number of points in the voxel. 
    use_sparsity_compensation_factor: false # If it takes true, the weight calculated with a point whose the norm of distance form the boundary is smaller than truncation distance 
                                            # is multiplied by "sparsity_compensation_factor". 
    sparsity_compensation_factor:  1.0
    integration_order_mode: "merged" # [simple, merged] simple method uses whole points. Merge method bundles the points before the updation. 
    integrator_threads: 4
    merge_with_clear: true
    weight_reduction_exp: 1.0 # the larget is, the smaller the init weight is. 
    weight_dropoff_epsilon: -1.0 # weight drops until its value becomes under the this value. 
    normal_available: true 
    reliable_band_ratio: 1.0 # point that its distance form boundary is smaller than (truncation_distance*reliable_band_ratio) is considered thier normal. 
    curve_assumption: true 
    reliable_normal_ratio_thre: 0.1 # point that the angle between its ray and normal is smaller than this value is used for updation. 

    #ã€€sensor
    sensor_image_width: 640
    sensor_image_height: 320
    point_cloud_min_depth: 0.15
    point_cloud_min_z: -0.5
    depth_smooth_thres_ratios: 0.05
    point_cloud_is_loop: true
    min_yaw_fov_rad: -3.14
    yaw_fov_rad_range: 6.28
    min_pitch_fov_rad: 0.0
    pitch_fov_rad_range: 1.57

    # mesh
    mesh_publish_hz: 1
    mesh_color_mode: color # [color, height, normals, gray]
    mesh_min_weight: 2.0 # the voxel whose weight is smaller than this value is ignored. 
    mesh_use_color: true